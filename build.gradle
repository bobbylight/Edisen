import java.time.format.*
import org.apache.tools.ant.taskdefs.condition.Os

// export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-14.jdk/Contents/Home
// export PATH=$JAVA_HOME/bin:$PATH

plugins {
    id 'java'
    id 'jacoco'
    id 'distribution'
    id 'checkstyle'
}

assert JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)

group 'org.fife'

sourceCompatibility = project.javaVersion

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

wrapper {
    gradleVersion '7.3.3'
    distributionType = Wrapper.DistributionType.ALL
}

checkstyle {
    toolVersion = '9.2.1'
    configDirectory = file("$rootProject.projectDir/config/checkstyle")
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true // codecov depends on xml format report
        html.required = true
    }
}

configurations.all { // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {

    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.1'
    implementation 'com.formdev:flatlaf:1.6.5'
    implementation 'com.formdev:flatlaf-intellij-themes:1.6.5'

    implementation('com.fifesoft.rtext:fife.common:5.0.0') { changing = true }
    implementation('com.fifesoft:rsyntaxtextarea:3.1.6') { changing = true }
    implementation 'com.fifesoft:autocomplete:3.1.4'
    implementation 'com.fifesoft:rstaui:3.1.4'
    implementation 'com.fifesoft:spellchecker:3.1.4'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

processResources {
    doLast {
        new File("${buildDir}/resources/main/", 'build-date.txt').text = ZonedDateTime.now( ZoneOffset.UTC ).format( DateTimeFormatter.ISO_INSTANT )
    }
}

jar {
    manifest {
        attributes(
            'Specification-Title': 'edisen',
            'Specification-Version': archiveVersion,
            'Implementation-Title': 'org.fife.edisen',
            'Implementation-Version': archiveVersion,
            'Build-Date': Instant.now().toString(),
            'Main-Class': 'org/fife/edisen/ui/Main',
            'Class-Path': configurations.runtimeClasspath.collect {
                return it.name
            }.join(' ')
        )
    }
}

distTar.dependsOn(jar)
distZip.dependsOn(jar)
installDist.dependsOn(jar)

distributions {
    main {

        contents {
            from { [
                'build/libs',
                configurations.runtimeClasspath // Include gradle dependencies
            ]}
            into { 'lib/' }
        }
    }
}

def getWindowsJreDependencyList = { installDistDir ->

    // Store the output instead of printing to the console
    def stdout = new ByteArrayOutputStream()

    exec {
        workingDir installDistDir
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine "${jdkRoot}/bin/jdeps", '--multi-release', project.javaVersion, '--ignore-missing-deps', '--list-deps', 'lib/edisen*.jar', 'lib/fife.common*.jar', 'lib/flatlaf*.jar', 'lib/jackson*.jar'
        }
        else {
            commandLine '/bin/bash', '-c', "${jdkRoot}/bin/jdeps --multi-release ${javaVersion} --ignore-missing-deps --list-deps lib/edisen*.jar lib/bife.common*.jar lib/flatlaf*.jar lib/jackson*.jar"
        }
        standardOutput = stdout
    }

    def retVal =  String.join(',', stdout.toString().split('[ \t\r\n]+'))
    if (retVal[0] == ',') {
        retVal = retVal.substring(1)
    }
    return retVal
}

task generateWindowsJre {
    doLast {

        def installDistDir = 'build/install/edisen'

        def moduleList = getWindowsJreDependencyList(installDistDir)
        println "Generating JRE with modules: ${moduleList}"

        exec {
            workingDir installDistDir
            commandLine "${jdkRoot}/bin/jlink", '--module-path', "\"${jdkRoot}/jmods\"", '--add-modules',
                    moduleList, '--output', embeddedJreFolderName, '--strip-debug', '--compress', '2',
                    '--no-header-files', '--no-man-pages'
        }
    }
}
generateWindowsJre.dependsOn('build', 'installDist')

task generateWindowsStarterExe {
    doLast {
        exec {
            commandLine launch4jExe, 'launch4j.xml'
        }
    }
}
generateWindowsStarterExe.dependsOn('generateWindowsJre')

task generateMacApp {
    doLast {
        exec {
            commandLine '/bin/bash', '-c', './mac/build-mac-app.sh'
        }
    }
}
generateMacApp.dependsOn('build', 'installDist')
