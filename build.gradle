import org.apache.tools.ant.taskdefs.condition.Os
import static org.gradle.api.JavaVersion.*

// export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home
// export PATH=$JAVA_HOME/bin:$PATH

plugins {
    id 'java'
    id 'jacoco'
    id 'distribution'
}

// There is no isJava14Compatible() method yet, even though we require 14
assert current().isJava12Compatible()

group 'org.fife'

sourceCompatibility = project.javaVersion

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

wrapper {
    gradleVersion '7.1.1'
    distributionType = Wrapper.DistributionType.ALL
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true // codecov depends on xml format report
        html.required = true
    }
}

dependencies {

    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.4'
    implementation 'com.formdev:flatlaf:1.4'
    implementation 'com.formdev:flatlaf-intellij-themes:1.4'

    implementation 'com.fifesoft.rtext:fife.common:4.0.0'
    implementation 'com.fifesoft:rsyntaxtextarea:3.1.3'
    implementation 'com.fifesoft:autocomplete:3.1.2'
    implementation 'com.fifesoft:rstaui:3.1.2'
    implementation 'com.fifesoft:spellchecker:3.1.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}

jar {
    manifest {
        attributes(
            'Specification-Title': 'edisen',
            'Specification-Version': archiveVersion,
            'Implementation-Title': 'org.fife.edisen',
            'Implementation-Version': archiveVersion,
            'Build-Date': Instant.now().toString(),
            'Main-Class': 'org/fife/edisen/ui/Main',
            'Class-Path': configurations.runtimeClasspath.collect {
                return it.name
            }.join(' ')
        )
    }
}

distTar.dependsOn(jar)
distZip.dependsOn(jar)
installDist.dependsOn(jar)

distributions {
    main {

        contents {
            from { [
                'build/libs',
                configurations.runtimeClasspath // Include gradle dependencies
            ]}
            into { 'lib/' }
        }
    }
}

def getWindowsJreDependencyList = { installDistDir ->

    // Store the output instead of printing to the console
    def stdout = new ByteArrayOutputStream()

    exec {
        workingDir installDistDir
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine "${jdkRoot}/bin/jdeps", '--multi-release', project.javaVersion, '--ignore-missing-deps', '--list-deps', 'lib/edisen*.jar', 'lib/fife.common*.jar', 'lib/flatlaf*.jar', 'lib/jackson*.jar'
        }
        else {
            commandLine '/bin/bash', '-c', "${jdkRoot}/bin/jdeps --multi-release ${javaVersion} --ignore-missing-deps --list-deps lib/edisen*.jar lib/bife.common*.jar lib/flatlaf*.jar lib/jackson*.jar"
        }
        standardOutput = stdout
    }

    def retVal =  String.join(',', stdout.toString().split('[ \t\r\n]+'))
    if (retVal[0] == ',') {
        retVal = retVal.substring(1)
    }
    return retVal
}

task generateWindowsJre {
    doLast {

        def installDistDir = 'build/install/edisen'

        def moduleList = getWindowsJreDependencyList(installDistDir)
        println "Generating JRE with modules: ${moduleList}"

        exec {
            workingDir installDistDir
            commandLine "${jdkRoot}/bin/jlink", '--module-path', "\"${jdkRoot}/jmods\"", '--add-modules',
                    moduleList, '--output', embeddedJreFolderName, '--strip-debug', '--compress', '2',
                    '--no-header-files', '--no-man-pages'
        }
    }
}
generateWindowsJre.dependsOn('build', 'installDist')

task generateWindowsStarterExe {
    doLast {
        exec {
            commandLine launch4jExe, 'launch4j.xml'
        }
    }
}
generateWindowsStarterExe.dependsOn('generateWindowsJre')

task generateMacApp {
    doLast {
        exec {
            commandLine '/bin/bash', '-c', './mac/build-mac-app.sh'
        }
    }
}
generateMacApp.dependsOn('build', 'installDist')
